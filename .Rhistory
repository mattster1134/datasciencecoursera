x
library(base)
library(utils)
library(data.table)
download.data <- function () {
zip.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
zip.file <- 'dataset.zip'
download.file(zip.url, destfile = zip.file, method = 'curl')
unzip(zip.file)
}
load.dataset <- function (set, features, labels) {
# Construct the relative pathes of data files
prefix <- paste(set, '/', sep = '')
file.data <- paste(prefix, 'X_', set, '.txt', sep = '')
file.label <- paste(prefix, 'y_', set, '.txt', sep = '')
file.subject <- paste(prefix, 'subject_', set, '.txt', sep = '')
# Cannot load the data using fread() function.
# fread() fails to determine the correct number of columns in dataset.
# So we read the data into a data.frame and then transform it into data.table
data <- read.table(file.data)[, features$index]
names(data) <- features$name
label.set <- read.table(file.label)[, 1]
data$label <- factor(label.set, levels=labels$level, labels=labels$label)
subject.set <- read.table(file.subject)[, 1]
data$subject <- factor(subject.set)
# convert to data table
data.table(data)
}
run.analysis <- function () {
setwd('UCI HAR Dataset/')
# Get the features
feature.set <- read.table('features.txt', col.names = c('index', 'name'))
features <- subset(feature.set, grepl('-(mean|std)[(]', feature.set$name))
# Get the labels
label.set <- read.table('activity_labels.txt', col.names = c('level', 'label'))
# Read train and test data sets
train.set <- load.dataset('train', features, label.set)
test.set <- load.dataset('test', features, label.set)
# The raw data set
dataset <- rbind(train.set, test.set)
# Generate the tidy data set
tidy.dataset <- dataset[, lapply(.SD, mean), by=list(label, subject)]
# Fix the variable names
names <- names(tidy.dataset)
names <- gsub('-mean', 'Mean', names) # Replace `-mean' by `Mean'
names <- gsub('-std', 'Std', names) # Replace `-std' by 'Std'
names <- gsub('[()-]', '', names) # Remove the parenthesis and dashes
names <- gsub('BodyBody', 'Body', names) # Replace `BodyBody' by `Body'
setnames(tidy.dataset, names)
# Write the raw and the tidy data sets to files
setwd('..')
write.csv(dataset, file = 'rawdata.csv', row.names = FALSE)
write.csv(tidy.dataset, file = 'tidydata.csv',
row.names = FALSE, quote = FALSE)
# Return the tidy data set
tidy.dataset
}
`getdata%2Fdata%2Fss06hid` <- read.csv("C:\\Users\\POSSIB~1\\AppData\\Local\\Temp\\RtmpIvEDs6\\data5a819f54436", header=FALSE)
View(`getdata%2Fdata%2Fss06hid`)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
amzn = getSymbols("AMZN")
amzn = getSymbols("AMZN",auto.assign=TRUE)
sampleTimes <- index(amzn)
length(sampleTimes)
bool1 <- year(sampleTimes) == 2012
bool1 <- year(sampleTimes) == 2012
install.packages("lubridate")
library(lubridate)
bool1 <- year(sampleTimes) == 2012
View(AMZN)
library(quantmod)
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
length(sampleTimes)
bool1 <- year(sampleTimes) == 2012
library(lubridate)
bool1 <- year(sampleTimes) == 2012
length(sampleTimes[bool1])
bool2 <- weekdays(sampleTimes)=="Monday"
length(sampleTimes[bool1 & bool2])
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
x
rnorm(12)
rep(1:3, each = 4)
rnorm(12, 12)
g <- rnorm(12, 12)
mean(g)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
text(x + 0.5, y + 0.5, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
labels
y <- as.character(1:12)
y
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
dataFrame <- data.frame(x = x, y = y)
dataFrame
View(dataFrame)
dist(dataFrame)
distxy <- dist(dataFrame)
distxy
t <- matrix(rnorm(100), nrow = 5)
t
dist(x)
hClustering <- hclust(distxy)
hClustering
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*!  Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
myplclust(hclust)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
distxy
hClustering <- hclust(distxy)
hClustering
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
dataMatrix
heatmap(dataMatrix)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
plot(x, y, col = "blue", pch = 19, cex = 1)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x, y)
dataFrame
kmeansObj <- kmeans(dataFrame, centers = 3)
kmeansObj
kmeansObj$cluster
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
dataMatrix
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
nrow(dataMatrix)
12:1
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
image(dataMatrix[, order(kmeansObj$cluster)], yaxt = "n")
a <- 354-346
b <- 354/346
function(x){}
test <- function(x){12.8 * 19.2 * pi }
test
test(3)
remove
rm(list=ls())
ls()
help(seq)
example(seq)
seq(from=-3, to=20, length=12)
seq(from=100, length=4, by=-6.5)
x <- 1:10
x[1:3]
new_df <- data.frame(X=101:110, Y=seq(from=51, by=2.5, length=10))
new_df
new_df[4,2]
new_df[4]
new_df[2]
new_df[,2]
as.data.frame(new_df[,2])
new_df[7,]
new_df$X
ncol(new_df)
nrow(new_df)
dim(new_df)
new_array <- seq(from=100, length=50, by=7.505)
a <- 60:85
a[12]
a[20]
a[c(5, 25)]
a[seq(from=4, to=24, b=4)]
a[-18]
a[c(-2, -15, -17)]
1:10-1
1:(10-1)
new_frame <- data.frame(X=33:47, Y=seq(from=225, to=157, by=3), Z=seq(from=10, length=15, by=-8.5))
new_frame <- data.frame(X=33:47, Y=seq(from=225, to=157, by = 3), Z=seq(from=10, length=15, by=-8.5))
new_frame <- data.frame(X=33:47, Y=seq(from=225, to=157, by = 3), Z=seq(from=10, by=-8.5, length=15))
new_frame <- data.frame(X=33:47, Y=seq(from=225, to=157, by=3), Z=seq(from=10, by=-8.5, length=15))
new_frame <- data.frame(X=33:47, Y=seq(from=225, to=157, by=3), Z=seq(from=10, by=-8.5, length=15))
seq(from=225, to=157, by=3)
new_frame <- data.frame(X=33:47, Y=seq(from=115, to=157, by=3), Z=seq(from=10, by=-8.5, length=15))
new_fram[,1]
new_frame[,1]
new_frame$X[6:10]
View(new_frame)
new_frame$Y[6:10]
new_frame[11,]
new_frame[4:8,c(1,3)]
as.data.frame(new_frame[4:8,c(1,3)])
nrows(new_frame)
nrow(new_frame)
new_frame$X
new_frame(,1)
new_frame[,1]
new_frame[1]
airquality
head(airquality)
mean(airquality[,2])
mean(airquality[2])
mean(airquality[,2], na.rm=TRUE)
any(is.na(airquality))
is.na(airquality)
air_complete <- na.omit(airquality)
head(air_complete)
any(is.na(air_complete))
myfunction <- function(x){5/9*(x-32) return x}
myfunction <- function(x){5/9*(x-32)}
airquality1 <- airquality
View(airquality1)
myfunction(airquality$temp)
myfunction(67)
myfunction(airquality[4])
max(airquality$Temp)
myfunction(97)
?which
example(which)
min(airquality$Temp)
which(airquality[5], 97)
sunspots_int <- rount(sunspots)
sunspots_int <- round(sunspots)
which(sunspots_int[,2] <= 5)
which(sunspots[,2] <= 5)
sunspots
sunspots1 <- sunspots
sunspots1 <- data.frame(sunspots)
which(sunspots1[,2] <= 5)
View(sunspots1)
airqualitys <- airquality
View(airqualitys)
max(airqualitys$Temp)
which(airquality$Temp = 97)
which(airqualitys$Temp = 97)
which(airqualitys$Temp == 97)
airquality[120,]
which(airquality$Wind <= 4)
airquality[which(airquality$Wind <= 4),]
length(which(airquality$Wind <= 4))
airquality <- airquality
View(airquality)
which(airquality$Wind > 4)
airquality[c(which(airquality$Wind > 4)), ]
length(which(airquality$Wind > 4))
which(airquality$Solar.R > 300)
airquality[which(airquality$Solar.R > 300), ]
median(airquality$Ozone)
median(airquality$Ozone, na.rm = TURE)
median(airquality$Ozone, na.rm = TRUE)
mean(airquality[,1], na.rm=TRUE)
round(mean(airquality[,1, na.rm=TRUE,digits=2]))
round(mean(airquality[,1], na.rm=TRUE), digits =2)
any(is.na(airquality[,4]))
temp_converter <- function(x) {}
temp_converter <- function(x) {
deg_C <- round((5/9)*(x-32), digits=1)
print(deg_C)
}
temp_converter(airquality[,4])
temp_converter(max(airquality[,4]))
which(temp_converter(airquality[,4])==temp_converter(max(airquality[,4])))
airquality[120,]
temp_converter(min(airquality[,4]))
which(temp_converter(airquality[,4])==temp_converter(min(airquality[,4])))
airquality[5,]
length(which(airquality[,3]<=4))
airquality[(which(airquality[,2]>300)),]
median(airquality[,1], na.rm=TRUE)
summary(airquality[,1])
cor.test(airquality$Ozone,airquality$Solar.R)
cor.test(airquality$Ozone, airquality$Wind)
cor.test(airquality$Ozone,airquality$Temp)
mean(ToothGrowth[which(ToothGrowth$supp=="OJ" & ToothGrowth$dose==2.0),1])
mean(ToothGrowth[which(Tooth)])
mean(ToothGrowth[which(ToothGrowth$supp=="VC" & ToothGrowth$dose==2.0),1])
tooth <- ToothGrowth
View(tooth)
a <- 10
b <- 11
if(b>a){}
if(b>a){print("b is greater than a")}
if(sum(1:3) >= sqrt(20)){print("statement is true")}
ifelse(sum(1:3) >= sqrt(50), "statement is true", if else(sum(1:3), "statement is now true", "statement is still false"))
ifelse(sum(1:3) >= sqrt(50), "statement is sture",
ifelse(sum(1:3) >= sqrt(30), "statement is now true",
"statement is still false"))
x <- 10
y <- 25
if(x<y){print "statement is correct"}
if(x<y){print("statement is correct")}
if(x<=y){print("statement is correct")} else{print("statement is incorrect")}
ifesle(x<=y), "statement is correct", "statement is incorrect"
ifesle(x<=y, "statement is correct", "statement is incorrect")
ifelsee(x<=y, "statement is correct", "statement is incorrect")
ifelse(x<=y, "statement is correct", "statement is incorrect")
z = 50
ifelse(x>y, "true",
ifelse(x>z, "one true, one false",
"both false"))
for(i in 1:20){print i}
for (i in 1:20){print i}
for (i in 1:20){print(i)}
for (i in 5:10){print(i^2-i)}
for (i in c("P", "I", "R", "A", "T", "E")){print(i)}
a <- -10
a <- -20
while(a<-9){
print(a)
a <- a+1}
while(a<9){
print(a)
a <- a+1}
a <- -10
while(a<9){
print(a)
a <- a+1}
a <- -20
while(a<9){
print(a)
a <- a+1}
a <- -20
while(a<-9){
print(a)
a <- a+1}
a <- -20
while(a<-9){
print(a)
a <- a+1}
a <- -20
while(a < (-9)){
print(a)
a <- a+1}
j = 10
j = 5
h = 10
j = -5
if(h < j){
print("statement is true")} else{
while(h<j){
print h
h = h+1
}
}
ifelse(h < j), "statement is true",
while(h>j){
print h
h = h + 1
}
ifelse(h < j, "statement is true",
while(h>j){
print h
h = h + 1
})
ifelse(h < j, "statement is true",
while(h>j){
print h
h = h + 1
})
ifelse(h<j, "statement is true". for(h>j){print(h)
h = h-1})
if(h , j){
print("statement is true")
} else {
while(h >= j){
print(h)
h <- h - 1
}
}
if(h , j){
print("statement is true")
} else {
while(h >= j){
print(h)
h <- h - 1
}
}
if(h , j){
print("statement is true")
} else {
while(h >= j){
print(h)
h <- h - 1
}
}
if(h , j){
print("statement is true")
} else {
while(h >= j){
print(h)
h <- h - 1
}
}
if(h , j){
print("statement is true")
} else {
while(h >= j){
print(h)
h <- h - 1
}
}
if(h < j){
print("statement is true")
} else {
while(h >= j){
print(h)
h <- h - 1
}
}
x <- c(-0.5, 0, 1, 1, 1.5)
y <- c(0, 0, 2, 0, 0)
plot(x, y, lwd = 3, frame = FALSE, type = "l")
pbeta(0.75, 2, 1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
install.packages("swirl")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,r) ~ parent,galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton\)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
View(galton)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist\)
cov(efit$residuals, attenu$dist)
install.packages("Tex")
library(Tex)
installr::installr()
install.packages("installr")
library(installr)
installr::installr()
install.packages("pandoc")
library(pandoc)
?boxplot
library(kernlab)
data(spam)
set.seed(333)
smallSpam <-spam[sample(dim(spam)[1],size=10),]
View(smallSpam)
sample(dim(spam)[1],size=10)
dim(spam)
dim(spam)[1]
spamLabel <- (smallSpam$type=="spam")*1+1
spamLabel
smallSpam$type
smallSpam$type=="spam"
(smallSpam$type=="spam")*1
(smallSpam$type=="spam")*1+1
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75, list=FALSE)
inTrain
?createDataPartition
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
library(caret)
library(kernlab)
data(spam)
setwd("~/Data Science/Developing Data Products")
shiny::runApp()
